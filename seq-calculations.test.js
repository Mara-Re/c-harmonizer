const {aminoDict, allCodons, codonAaDict} = require('./codons');
const {
    splitDnaIntoCodons,
    countAllCodons,
    calcCodonScores,
    // translateDna,
    calcCodonScoreDict,
    calcHarmonizedGeneSeq,
    calcGeneScore
} = require('./seq-calculations');

const ex = require('./dna-test-examples');

test('input seqence is correctly split into codons, ignoring whitespaces', () => {
    const codonArr1 = splitDnaIntoCodons(ex.dna1);
    const codonArr2 = splitDnaIntoCodons(ex.dna2);
    const codonArr3 = splitDnaIntoCodons(ex.dna3);


    expect(codonArr1).toStrictEqual(['ATG','ATC','CAC','ACA','GCC','CTG','GAG','GAT','TTG','CTC','AGC','TCC','CCA','CCC','CAT','CCC','CCA','GAC','GAC','TTA','CAG','TGA']);
    expect(codonArr2).toStrictEqual(['ATG','CGT','CCG','GAA','GTT','GAA','CAA','GAG','CTT','GCT','CAC','ACC','TTG','TTG','GTG','GAG','CTG']);
    expect(codonArr3).toStrictEqual([    
        "AAA", "AAC", "AAG", "AAT", "ACA", "ACC", "ACG", "ACT", 
        "AGA", "AGC", "AGG", "AGT", "ATA", "ATC", "ATG", "ATT", 
        "CAA", "CAC", "CAG", "CAT", "CCA", "CCC", "CCG", "CCT", 
        "CGA", "CGC", "CGG", "CGT", "CTA", "CTC", "CTG", "CTT", 
        "GAA", "GAC", "GAG", "GAT", "GCA", "GCC", "GCG", "GCT", 
        "GGA", "GGC", "GGG", "GGT", "GTA", "GTC", "GTG", "GTT", 
        "TAA", "TAC", "TAG", "TAT", "TCA", "TCC", "TCG", "TCT", 
        "TGA", "TGC", "TGG", "TGT", "TTA", "TTC", "TTG", "TTT"
    ]);
        
    //Test: length of codonArr should be length of input after removing white spaces devided by 3
});

test('codons are correctly counted', () => {
    const countsObj1 = countAllCodons(ex.codonArr1);
    const countsObj2 = countAllCodons(ex.codonArr2);

    expect(countsObj1).toStrictEqual({ 
        AAA: 0,
        AAC: 0,
        AAG: 0,
        AAT: 0,
        ACA: 0,
        ACC: 0,
        ACG: 0,
        ACT: 0,
        AGA: 0,
        AGC: 0,
        AGG: 0,
        AGT: 0,
        ATA: 0,
        ATC: 1,
        ATG: 1,
        ATT: 0,
        CAA: 0,
        CAC: 0,
        CAG: 0,
        CAT: 0,
        CCA: 0,
        CCC: 0,
        CCG: 0,
        CCT: 0,
        CGA: 0,
        CGC: 0,
        CGG: 0,
        CGT: 0,
        CTA: 0,
        CTC: 0,
        CTG: 0,
        CTT: 0,
        GAA: 0,
        GAC: 0,
        GAG: 0,
        GAT: 0,
        GCA: 0,
        GCC: 0,
        GCG: 0,
        GCT: 0,
        GGA: 0,
        GGC: 0,
        GGG: 0,
        GGT: 5,
        GTA: 0,
        GTC: 0,
        GTG: 0,
        GTT: 0,
        TAA: 0,
        TAC: 0,
        TAG: 0,
        TAT: 0,
        TCA: 0,
        TCC: 0,
        TCG: 0,
        TCT: 0,
        TGA: 0,
        TGC: 0,
        TGG: 0,
        TGT: 0,
        TTA: 0,
        TTC: 0,
        TTG: 0,
        TTT: 0 
    });
    expect(countsObj2).toStrictEqual({ AAA: 1,
        AAC: 1,
        AAG: 1,
        AAT: 1,
        ACA: 1,
        ACC: 1,
        ACG: 1,
        ACT: 1,
        AGA: 1,
        AGC: 1,
        AGG: 1,
        AGT: 1,
        ATA: 1,
        ATC: 1,
        ATG: 1,
        ATT: 1,
        CAA: 1,
        CAC: 1,
        CAG: 1,
        CAT: 1,
        CCA: 1,
        CCC: 1,
        CCG: 1,
        CCT: 1,
        CGA: 1,
        CGC: 1,
        CGG: 1,
        CGT: 1,
        CTA: 1,
        CTC: 1,
        CTG: 1,
        CTT: 1,
        GAA: 1,
        GAC: 1,
        GAG: 1,
        GAT: 1,
        GCA: 1,
        GCC: 1,
        GCG: 1,
        GCT: 1,
        GGA: 1,
        GGC: 1,
        GGG: 1,
        GGT: 1,
        GTA: 1,
        GTC: 1,
        GTG: 1,
        GTT: 1,
        TAA: 1,
        TAC: 1,
        TAG: 1,
        TAT: 1,
        TCA: 1,
        TCC: 1,
        TCG: 1,
        TCT: 1,
        TGA: 1,
        TGC: 1,
        TGG: 1,
        TGT: 1,
        TTA: 1,
        TTC: 1,
        TTG: 1,
        TTT: 1 
    });
    
    //Test: adding all codonCounts together should be equal the length of codonArr
});

test('codon scores are correctly counted', () => {
    const scoreObj1 = calcCodonScores(ex.countObj1);
    const scoreObj2 = calcCodonScores(ex.countObj2);

    expect(scoreObj1).toStrictEqual({ AAA: 0,
        AAC: 0,
        AAG: 0,
        AAT: 0,
        ACA: 0,
        ACC: 0,
        ACG: 0,
        ACT: 0,
        AGA: 0.1,
        AGC: 0,
        AGG: 0.15,
        AGT: 0,
        ATA: 0,
        ATC: 0,
        ATG: 0,
        ATT: 0,
        CAA: 0,
        CAC: 0,
        CAG: 0,
        CAT: 0,
        CCA: 0,
        CCC: 0,
        CCG: 0,
        CCT: 0,
        CGA: 0.35,
        CGC: 0.05,
        CGG: 0.1,
        CGT: 0.25,
        CTA: 0,
        CTC: 0,
        CTG: 0,
        CTT: 0,
        GAA: 0,
        GAC: 0,
        GAG: 0,
        GAT: 0,
        GCA: 0,
        GCC: 0,
        GCG: 0,
        GCT: 0,
        GGA: 0.2,
        GGC: 0,
        GGG: 0.3,
        GGT: 0.5,
        GTA: 0,
        GTC: 0,
        GTG: 0,
        GTT: 0,
        TAA: 0,
        TAC: 0,
        TAG: 0,
        TAT: 0,
        TCA: 0,
        TCC: 0,
        TCG: 0,
        TCT: 0,
        TGA: 0,
        TGC: 0,
        TGG: 0,
        TGT: 0,
        TTA: 0,
        TTC: 0,
        TTG: 0,
        TTT: 0 
    });
    expect(scoreObj2).toStrictEqual({ 
        AAA: 1,
        AAC: 1,
        AAG: 0,
        AAT: 0,
        ACA: 1,
        ACC: 0,
        ACG: 0,
        ACT: 0,
        AGA: 0,
        AGC: 1,
        AGG: 0.5,
        AGT: 0,
        ATA: 0,
        ATC: 0,
        ATG: 1,
        ATT: 1,
        CAA: 1,
        CAC: 1,
        CAG: 0,
        CAT: 0,
        CCA: 1,
        CCC: 0,
        CCG: 0,
        CCT: 0,
        CGA: 0.5,
        CGC: 0,
        CGG: 0,
        CGT: 0,
        CTA: 0,
        CTC: 1,
        CTG: 0,
        CTT: 0,
        GAA: 1,
        GAC: 1,
        GAG: 0,
        GAT: 0,
        GCA: 1,
        GCC: 0,
        GCG: 0,
        GCT: 0,
        GGA: 1,
        GGC: 0,
        GGG: 0,
        GGT: 0,
        GTA: 1,
        GTC: 0,
        GTG: 0,
        GTT: 0,
        TAA: 0,
        TAC: 1,
        TAG: 0,
        TAT: 0,
        TCA: 0,
        TCC: 0,
        TCG: 0,
        TCT: 0,
        TGA: 0,
        TGC: 1,
        TGG: 0,
        TGT: 0,
        TTA: 0,
        TTC: 1,
        TTG: 0,
        TTT: 0 
    });
});


test('gene score is correctly calculated', () => {
    const geneScorrArr1 = calcGeneScore(ex.gene1, ex.scoreDict1);

    expect(geneScorrArr1).toStrictEqual([ 0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.1,
        0,
        0.15,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.35,
        0.05,
        0.1,
        0.25,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.2,
        0,
        0.3,
        0.5,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0 
    ]);
});

test('codon score dictionary is calculated correctly', () => {
    const scoreDict1 = calcCodonScoreDict(ex.refGene1);
    const scoreDict2 = calcCodonScoreDict('ATG');
    
    expect(scoreDict2).toStrictEqual({ 
        A: { GCA: 0, GCC: 0, GCG: 0, GCT: 0 },
        C: { TGC: 0, TGT: 0 },
        D: { GAC: 0, GAT: 0 },
        E: { GAA: 0, GAG: 0 },
        F: { TTC: 0, TTT: 0 },
        G: { GGA: 0, GGC: 0, GGG: 0, GGT: 0 },
        H: { CAC: 0, CAT: 0 },
        I: { ATA: 0, ATC: 0, ATT: 0 },
        K: { AAA: 0, AAG: 0 },
        L: { CTA: 0, CTC: 0, CTG: 0, CTT: 0, TTA: 0, TTG: 0 },
        M: { ATG: 1 },
        N: { AAC: 0, AAT: 0 },
        P: { CCA: 0, CCC: 0, CCG: 0, CCT: 0 },
        Q: { CAA: 0, CAG: 0 },
        R: { AGA: 0, AGG: 0, CGA: 0, CGC: 0, CGG: 0, CGT: 0 },
        S: { AGC: 0, AGT: 0, TCA: 0, TCC: 0, TCG: 0, TCT: 0 },
        T: { ACA: 0, ACC: 0, ACG: 0, ACT: 0 },
        V: { GTA: 0, GTC: 0, GTG: 0, GTT: 0 },
        W: { TGG: 0 },
        Y: { TAC: 0, TAT: 0 },
        _: { TAG: 0, TAA: 0, TGA: 0 } 
    });

    expect(scoreDict1).toStrictEqual({ 
        A: { GCA: 0, GCC: 0, GCG: 0, GCT: 0 },
        C: { TGC: 0, TGT: 0 },
        D: { GAC: 0, GAT: 0 },
        E: { GAA: 0, GAG: 0 },
        F: { TTC: 0, TTT: 0 },
        G: { GGA: 0.1, GGC: 0.1, GGG: 0.3, GGT: 0.5 },
        H: { CAC: 0, CAT: 0 },
        I: { ATA: 0, ATC: 0, ATT: 0 },
        K: { AAA: 0, AAG: 0 },
        L: { CTA: 0, CTC: 0, CTG: 0, CTT: 0, TTA: 0, TTG: 0 },
        M: { ATG: 0 },
        N: { AAC: 0, AAT: 0 },
        P: { CCA: 0, CCC: 0, CCG: 0, CCT: 0 },
        Q: { CAA: 0, CAG: 0 },
        R: { AGA: 0.2, AGG: 0.15, CGA: 0.35, CGC: 0.05, CGG: 0, CGT: 0.25 },
        S: { AGC: 0, AGT: 0, TCA: 0, TCC: 0, TCG: 0, TCT: 0 },
        T: { ACA: 0, ACC: 0, ACG: 0, ACT: 0 },
        V: { GTA: 0, GTC: 0, GTG: 0, GTT: 0 },
        W: { TGG: 0 },
        Y: { TAC: 0, TAT: 0 },
        _: { TAG: 0, TAA: 0, TGA: 0 } 
    });
    
    //+Test: within one amino acid -> the sum of all values should be 
    //EXEPT IF ALL ARE 0?
});

// test('harmonized gene is correctly calculated', () => {

// });








